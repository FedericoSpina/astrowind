---
import type { HTMLAttributes } from 'astro/types';
import { findImage } from '~/utils/images';
import {
  getImagesOptimized,
  astroAsseetsOptimizer,
  unpicOptimizer,
  isUnpicCompatible,
  type ImageProps,
} from '~/utils/images-optimization';

type Props = ImageProps;
type ImageType = {
  src: string;
  attributes: HTMLAttributes<'img'>;
};

const props = { ...Astro.props }; // Crear una copia mutable de props

if (!props.alt) {
  throw new Error("El atributo 'alt' es obligatorio para la imagen.");
}

if (typeof props.width === 'string') {
  props.width = parseInt(props.width, 10);
}

if (typeof props.height === 'string') {
  props.height = parseInt(props.height, 10);
}

props.loading ??= 'lazy';  // Usar el operador de asignación lógica para valores por defecto
props.decoding ??= 'async';

const _image = await findImage(props.src);

let image: ImageType | undefined = undefined;

if (
  typeof _image === 'string' &&
  (_image.startsWith('http://') || _image.startsWith('https://')) &&
  isUnpicCompatible(_image)
) {
  image = await getImagesOptimized(_image, props, unpicOptimizer);
} else if (_image) {
  image = await getImagesOptimized(_image, props, astroAsseetsOptimizer);
}
---

{
  !image ? (
    <Fragment />
  ) : (
    <img src={image.src} crossorigin="anonymous" referrerpolicy="no-referrer" {...image.attributes} />
  )
}
